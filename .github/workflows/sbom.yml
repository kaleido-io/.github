on:
  workflow_call:
    outputs:
      npm-dependencies:
        description: "project's npm dependencies, versions and licenses"
        value: ${{ jobs.dependency-check.outputs.npm-dependencies }}
      go-dependencies:
        description: "project's go dependencies, versions and licenses"
        value: ${{ jobs.dependency-check.outputs.go-dependencies }}
    inputs:
      language:
        required: true
        type: string
        default: npm
      project_entrypoint:
        required: true
        type: string
        default: "./"
      target_branch:
        required: false
        type: string
        default: main
      node_version:
        required: false
        type: string
        default: "18"
      submodules:
        required: false
        type: string
        description: >
          Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          recursively checkout submodules.
          When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
          converted to HTTPS.
        default: "false"
    secrets:
      ORG_PAT:
        required: false
      NPM_TOKEN:
        required: false
jobs:
  dependency-check:
    if: ${{ inputs.language }} == 'golang'
    runs-on: ubuntu-latest
    outputs:
      npm-dependencies: ${{ steps.npm-dependencies.outputs.DEPENDENCIES }}
      go-log: ${{ steps.go-dependencies.outputs.DEPENDENCIES }}
      # a final output called dependencies which will be equal to npm-dependencies or go-dependencies dependeing on the language
      dependencies: ${{ inputs.language == 'nodejs' && steps.npm-despendencies.outputs.DEPENDENCIES || steps.go-dependencies.outputs.DEPENDENCIES }}
    steps:
      - name: git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules == 'true' }}
        if: (inputs.submodules == 'true' || inputs.submodules == 'false')  && github.event_name != 'workflow_dispatch'

      # assumes the submodules is a private repo
      - name: git checkout w/ recursive submodules
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules }}
          token: ${{ secrets.ORG_PAT }}
        if: inputs.submodules == 'recursive' && github.event_name != 'workflow_dispatch'

      # Follow the same git checkout process with submodules but specify a branch ref if it is a workflow_dispatch build
      - name: git checkout workflow_dispatch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules == 'true' }}
          ref: ${{ inputs.target_branch }}
        if: (inputs.submodules == 'true' || inputs.submodules == 'false') && github.event_name == 'workflow_dispatch'

      # assumes the submodules is a private repo
      - name: git checkout w/ recursive submodules workflow_dispatch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules }}
          token: ${{ secrets.ORG_PAT }}
          ref: ${{ inputs.target_branch }}
        if: inputs.submodules == 'recursive' && github.event_name == 'workflow_dispatch'

      - name: install go
        uses: actions/setup-go@v4
        with:
          go-version: "^1.21.3"
        if: inputs.language == 'golang'

      - name: install node@${{inputs.node_version}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node_version }}
        if: inputs.language == 'nodejs'

      - name: install npm dependencies
        run: npm install --production
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: inputs.language == 'nodejs'

      - name: install go-licenses
        run: go install github.com/google/go-licenses@latest
        if: inputs.language == 'golang'

      - name: install miller csv parser tool
        run: sudo apt-get install miller
        if: inputs.language == 'golang'

      - name: install npm license checker tool
        run: npm install -g license-checker-rseidelsohn
        if: inputs.language == 'nodejs'

      - name: verify go license types
        run: |
          ls -al
          pwd
          go-licenses check --disallowed_types restricted --disallowed_types forbidden --ignore github.com/kaleido-io .
          # forbidden list: https://github.com/google/licenseclassifier/blob/e6a9bb99b5a6f71d5a34336b8245e305f5430f99/license_type.go#L341
          # restricted list: https://github.com/google/licenseclassifier/blob/e6a9bb99b5a6f71d5a34336b8245e305f5430f99/license_type.go#L185
        working-directory: ${{ inputs.project_entrypoint }}
        if: inputs.language == 'golang'

      - name: verify npm license types
        run: license-checker-rseidelsohn --production --unknown --failOn "GPL;AGPL"
        working-directory: ${{ inputs.project_entrypoint }}
        if: inputs.language == 'nodejs'

      - name: list go dependencies for release
        id: go-dependencies
        run: |
          GO_LICENSES=$(go-licenses report . --ignore github.com/kaleido-io 2> /dev/null | mlr --csv --implicit-csv-header label dependency,repo,license | mlr --icsv --ojson cat | jq 'reduce .[] as $item ({}; . + {($item.dependency): $item.license})')
          # this is a JSON like:
          # { "github.com/aidarkhanov/nanoid": "MIT", ...}
          GO_MOD_DEPS=$(go mod edit --json | jq '.Require')
          # filter out entries that are "indirect": true
          GO_MOD_DEPS=$(echo $GO_MOD_DEPS | jq 'map(select(.Indirect == null))')
          # that is a list like:
          # [{ "Path": "github.com/cert-manager/cert-manager","Version": "v1.9.1"}, {...}]

          # for each dependency, find its license and construct a json in the form of:
          # { "github.com/aidarkhanov/nanoid@v1.9.1": "MIT", ...}
          # note: the dependency from GO_MOD_DEPS may be a substring of one in GO_LICENSES and may not fully exactly
          DEPENDENCIES=$(jq -n \
            --argjson go_licenses "$GO_LICENSES" \
            --argjson go_mod_deps "$GO_MOD_DEPS" \
            '[
              $go_mod_deps[] | 
              {
                path: .Path,
                version: .Version,
                license: ($go_licenses | to_entries[] | select(.Path | contains(.key)) | .value)
              }
            ] | 
            reduce .[] as $item ({}; . + {($item.path + "@" + $item.version): $item.license})')

          echo "DEPENDENCIES<<EOF" >> $GITHUB_OUTPUT
          echo $DEPENDENCIES >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$DEPENDENCIES"
        working-directory: ${{ inputs.project_entrypoint }}
        if: inputs.language == 'golang'

      - name: list npm dependencies for release
        id: npm-dependencies
        run: |
          DEPENDENCIES=$(license-checker-rseidelsohn --direct 0 --production --unknown --json)
          DEPENDENCIES=$(echo $DEPENDENCIES | jq 'with_entries(.value = .value.licenses)')
          echo "DEPENDENCIES<<EOF" >> $GITHUB_OUTPUT
          echo $DEPENDENCIES >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$DEPENDENCIES"
        working-directory: ${{ inputs.project_entrypoint }}
        if: inputs.language == 'nodejs'
